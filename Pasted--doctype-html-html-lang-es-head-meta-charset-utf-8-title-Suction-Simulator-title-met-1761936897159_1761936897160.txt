<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8">
<title>Suction Simulator</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<style>
  :root{--bg:#0b1220;--panel:#0f172a;--border:#1f2a44;--text:#e5eef8;--muted:#9fb0c7;--a:#38bdf8;--ok:#10b981;--warn:#f59e0b;--bad:#ef4444}
  *{box-sizing:border-box}
  body{margin:0;background:linear-gradient(180deg,#081225,#0b1220);color:var(--text);font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial}
  .wrap{max-width:1200px;margin:0 auto;padding:18px}
  header{display:flex;align-items:center;gap:14px;margin-bottom:10px}
  header img{height:44px}
  header .title{font-size:28px;font-weight:800}
  header .subtitle{font-size:12px;color:var(--muted)}
  .grid{display:grid;gap:14px}
  @media(min-width:1100px){.grid{grid-template-columns:1fr 2fr}}
  .card{background:linear-gradient(180deg,rgba(255,255,255,.03),rgba(255,255,255,.01));border:1px solid var(--border);border-radius:16px;padding:14px}
  label{font-size:14px} small{color:var(--muted)}
  input[type=range],select{width:100%;accent-color:var(--a)}
  select{background:#0b1220;border:1px solid var(--border);color:var(--text);border-radius:10px;padding:6px 10px}
  .row{display:grid;grid-template-columns:1fr;gap:10px}
  @media(min-width:640px){.row{grid-template-columns:1fr 1fr}}
  .flex{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
  .btn{border:1px solid var(--border);background:#0b1220;color:var(--text);border-radius:12px;padding:8px 12px;cursor:pointer;font-weight:700}
  .btn.primary{background:#042317;color:#d1fae5;border-color:#065f46}
  .badge{display:inline-flex;align-items:center;border-radius:999px;padding:6px 10px;font-size:12px;font-weight:700}
  .good{background:#063a2a;color:#d1fae5;border:1px solid #0f766e}
  .warn{background:#3b2d06;color:#fde68a;border:1px solid #b45309}
  .bad{background:#3a0d0d;color:#fecaca;border:1px solid #b91c1c}
  canvas{width:100%;border:1px solid var(--border);border-radius:14px;background:#071022}
  #cvTop{height:300px}
  #cvBottom{height:160px;margin-top:8px}
  .kpis{display:grid;grid-template-columns:repeat(6,1fr);gap:10px;margin-top:10px}
  .kpi{border:1px solid var(--border);border-radius:12px;padding:10px}
  .kpi .t{font-size:12px;color:var(--muted)} .kpi .v{font-weight:900;font-size:20px}
  .help{font-size:14px;color:var(--muted)}
  .pill{border:1px solid var(--border);border-radius:999px;padding:2px 8px}
  .legend{display:flex;gap:12px;align-items:center;font-size:13px;color:#cbd5e1}
  .dot{width:12px;height:12px;border-radius:50%}
  .conv{font-size:12px;color:#cbd5e1;margin-top:8px}
  #__err{position:fixed;inset:auto 16px 16px 16px;background:#1f2937;color:#fecaca;border:1px solid #b91c1c;border-radius:12px;padding:10px;font:12px/1.4 ui-sans-serif,system-ui;display:none;z-index:99999}
</style>
</head>
<body>
<div class="wrap">
  <header>
    <img id="iberoLogo" src="logo_Ibero.png" alt="IBERO" onerror="this.style.display='none'">
    <div>
      <div class="title">Suction Simulator</div>
      <div class="subtitle">Investigador: Flgo. Carlos Calvache, Ph.D. ‚Äî Docente de Carrera, Programa de Fonoaudiolog√≠a, Facultad Ciencias de la Salud (IBERO)</div>
    </div>
  </header>

  <div class="flex" style="justify-content:flex-end;margin-bottom:8px">
    <button id="evBtn" class="btn" title="Ver soporte bibliogr√°fico">üìé Evidencia</button>
  </div>

  <div class="grid">
    <div class="card">
      <h3 style="margin:0 0 10px 0">Controles</h3>
      <div class="row">
        <div>
          <label>Modo</label>
          <select id="mode">
            <option value="sn" selected>SN (Succi√≥n Nutritiva)</option>
            <option value="snn">SNN (Succi√≥n No Nutritiva)</option>
          </select>
        </div>
        <div>
          <label>Edad / PMA</label>
          <select id="ageBand">
            <option value=0>32‚Äì34 sem</option>
            <option value=1>34‚Äì36 sem</option>
            <option value=2 selected>‚â• 37 sem</option>
          </select>
        </div>
      </div>
      <div class="row">
        <div>
          <label>Unidades de vac√≠o (eje superior)</label>
          <select id="unitSel">
            <option value="kPa" selected>kPa (negativo)</option>
            <option value="mmHg">mmHg (negativo)</option>
          </select>
        </div>
        <div>
          <label>Vac√≠o m√°x. (|kPa| base) <span class="pill" title="Picos al pecho ‚âà100‚Äì150 mmHg (13‚Äì20 kPa); en tetinas activadas por vac√≠o el umbral t√≠pico es ‚âà29 mmHg">‚ìò</span>: <b><span id="pmaxL">2.2</span></b> <small id="pmaxConv">(‚âà 16.5 mmHg / 2200 Pa)</small></label>
          <input id="pmax" type="range" min="0" max="4" step="0.1" value="2.2">
        </div>
      </div>
      <div class="row">
        <div>
          <label>Frecuencia (succ/min) <span class="pill" title="SNN ‚âà 2 Hz (‚àº120/min); SN t√≠pico 50‚Äì80/min seg√∫n contexto">‚ìò</span>: <b><span id="freqL">60</span></b></label>
          <input id="freq" type="range" min="20" max="180" step="1" value="60">
        </div>
        <div>
          <label>Duraci√≥n racimo (s) <span class="pill" title="SN: racimos medianos ~10‚Äì20 s; en pret√©rmino a menudo las pausas son ‚â• a los racimos">‚ìò</span>: <b><span id="burstL">12</span></b></label>
          <input id="burst" type="range" min="1" max="20" step="1" value="12">
        </div>
      </div>
      <div class="row">
        <div>
          <label>Pausa entre racimos (s) <span class="pill" title="Criterios de segmentaci√≥n usuales: pausas ‚â• 2 s para separar racimos">‚ìò</span>: <b><span id="restL">3</span></b></label>
          <input id="rest" type="range" min="0" max="15" step="1" value="3">
        </div>
        <div>
          <label>Relaci√≥n SDR</label>
          <select id="sdr">
            <option value="none">Sin overlay</option>
            <option value="1">1:1:1</option>
            <option value="2" selected>2:1:1</option>
            <option value="3">3:1:1</option>
            <option value="pLow">SNN: Prob. baja degluci√≥n</option>
            <option value="pMed">SNN: Prob. media degluci√≥n</option>
            <option value="pHigh">SNN: Prob. alta degluci√≥n</option>
          </select>
          <small>En SNN el ‚Äútrago‚Äù es salival y no r√≠tmico.</small>
        </div>
      </div>
      <div class="row">
        <div>
          <label>Animaci√≥n</label>
          <div class="flex">
            <button id="playBtn" class="btn primary">‚ñ∂Ô∏é Play</button>
            <button id="pauseBtn" class="btn">‚è∏Ô∏é Pause</button>
            <button id="presetSN" class="btn">SN t√≠pico</button>
            <button id="presetSNN" class="btn">SNN t√≠pico</button>
            <button id="presetDys" class="btn">Desorganizado</button>
          </div>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="flex" style="justify-content:space-between;align-items:center;margin-bottom:8px;display:none">
        <div class="legend">
          <div class="dot" style="background:#38bdf8"></div> Succi√≥n
          <div class="dot" style="background:#10b981"></div> Respiraci√≥n (pausas)
          <div class="dot" style="background:#a855f7"></div> Degluci√≥n (‚îÇ‚îÇ)
          <div class="dot" style="background:#94a3b8"></div> Apnea (‚äò)
          <div class="dot" style="background:#facc15"></div> L√≠mites pausa
        </div>
        <span id="unitBadge" class="pill">kPa (negativo)</span>
      </div>

      <canvas id="cvTop" width="960" height="300"></canvas>
      <canvas id="cvBottom" width="960" height="160"></canvas>

      <div class="conv" id="iconConv" style="display:flex;align-items:center;gap:14px;flex-wrap:wrap">
        <span class="pill" title="Succi√≥n" style="display:inline-flex;align-items:center;gap:6px"><span style="display:inline-block;width:18px;height:3px;background:#38bdf8"></span> Succi√≥n</span>
        <span class="pill" title="Respiraci√≥n en pausa" style="display:inline-flex;align-items:center;gap:6px"><span style="display:inline-block;width:18px;height:3px;background:#10b981;border-bottom:1px dashed #10b981"></span> Resp</span>
        <span class="pill" title="Degluci√≥n" style="display:inline-flex;align-items:center;gap:6px"><span style="display:inline-block;width:18px;height:3px;background:transparent;border-left:3px dashed #a855f7;border-right:3px dashed #a855f7"></span> D</span>
        <span class="pill" title="Apnea breve" style="display:inline-flex;align-items:center;gap:6px"><span style="display:inline-block;width:16px;height:12px;background:#94a3b8;opacity:.35;border-radius:3px;text-align:center;line-height:12px;color:#e5eef8">‚äò</span> Apnea</span>
        <span class="pill" title="L√≠mites de pausa" style="display:inline-flex;align-items:center;gap:6px"><span style="display:inline-block;width:18px;height:3px;background:#facc15"></span> Pausa</span>
      </div>

      <div class="kpis">
        <div class="kpi"><div class="t">Vac√≠o m√°x. (abs)</div><div class="v" id="kP">‚Äî</div></div>
        <div class="kpi"><div class="t">Frecuencia medida</div><div class="v" id="kF">‚Äî</div></div>
        <div class="kpi"><div class="t">Succ por racimo (med)</div><div class="v" id="kSR">‚Äî</div></div>
        <div class="kpi"><div class="t">Duraci√≥n racimo (med)</div><div class="v" id="kBD">‚Äî</div></div>
        <div class="kpi"><div class="t">Pausa media</div><div class="v" id="kPause">‚Äî</div></div>
        <div class="kpi"><div class="t">IC (0‚Äì1)</div><div class="v" id="kIC">‚Äî</div></div>
      </div>

      <div id="eduBox" style="margin-top:10px"></div>

      <div class="card" style="margin-top:10px">
        <h4 style="margin:0 0 6px 0">NOMAS (educativo)</h4>
        <div class="flex" style="gap:20px;flex-wrap:wrap">
          <label><input type="checkbox" id="n_continuidad_baja"> Continuidad baja</label>
          <label><input type="checkbox" id="n_racimos_cortos"> Racimos cortos</label>
          <label><input type="checkbox" id="n_pausas_largas"> Pausas prolongadas</label>
          <label><input type="checkbox" id="n_vacio_bajo"> Vac√≠o insuficiente</label>
          <label><input type="checkbox" id="n_frec_extrema"> Frecuencia fuera de rango</label>
          <label><input type="checkbox" id="n_incoordinacion"> Incoordinaci√≥n S-D-R</label>
          <label><input type="checkbox" id="n_resp_irregular"> Respiraci√≥n irregular</label>
        </div>
      </div>
    </div>
  </div>

  <footer class="help" style="margin-top:10px">¬© IBERO ‚Äî Docencia. Panel NOMAS: interpretaci√≥n pedag√≥gica, no diagn√≥stica.</footer>
</div>

<!-- Drawer de evidencia -->
<aside id="evDrawer" style="position:fixed;inset:0 0 0 auto;width:420px;max-width:92vw;background:#0b1220;border-left:1px solid var(--border);box-shadow:-6px 0 24px rgba(0,0,0,.35);padding:14px 14px 80px 14px;overflow:auto;display:none;z-index:10000">
  <div class="flex" style="justify-content:space-between;align-items:center;margin-bottom:8px">
    <div style="font-weight:800">Soporte bibliogr√°fico</div>
    <button id="evClose" class="btn" aria-label="Cerrar">‚úï</button>
  </div>
  <div id="evContent" class="help" style="font-size:13px;line-height:1.4"></div>
  <div class="help" style="position:sticky;bottom:0;background:linear-gradient(180deg,transparent,rgba(0,0,0,.25));padding-top:10px;margin-top:18px">
    <span>Tip: toca los ‚Äú‚ìò‚Äù para un resumen r√°pido; abre el panel para ver las citas.</span>
  </div>
</aside>

<div id="__err"></div>

<script>
/* Inline logo fallback (SVG) */
(function(){
  var img = document.getElementById('iberoLogo');
  if(!img) return;
  img.addEventListener('error', function(){
    var svg = '<svg xmlns="http://www.w3.org/2000/svg" width="180" height="44"><rect width="100%" height="100%" fill="#0b1220"/><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-family="Arial,Helvetica,sans-serif" font-weight="700" font-size="22" fill="#e5eef8">IBERO</text></svg>';
    var uri = 'data:image/svg+xml;base64,' + btoa(svg);
    img.src = uri;
    img.style.display = 'inline-block';
  }, {once:true});
})();

/* Runtime error overlay */
(function(){
  var box = document.getElementById('__err');
  window.addEventListener('error', function(e){ box.style.display = 'block'; box.textContent = 'Error: ' + (e.message || 'desconocido'); });
  window.addEventListener('unhandledrejection', function(e){ box.style.display = 'block'; box.textContent = 'Error (promesa): ' + (e.reason && e.reason.message ? e.reason.message : String(e.reason)); });
})();

/* =====================
   Unidades
   ===================== */
const toMmHg=kPa=>kPa*7.50062, toPa=kPa=>kPa*1000.0;
const kPaToDisplay=(kPa,u)=>u==='mmHg'?toMmHg(kPa):u==='Pa'?toPa(kPa):kPa;

/* =====================
   Se√±al: valle senoidal (por muestra)
   ===================== */
function valleyPulse(t,c,w){ const x=(t-c)/(w/2); if(Math.abs(x)>1) return 0; const v=0.5*(1+Math.cos(Math.PI*x)); return Math.pow(v,2.2); }
function suctionSample(t,fHz,burstLen,restLen,ampKPa){
  const T=1/Math.max(0.1,fHz), w=0.45*T;
  const period=burstLen+restLen;
  if(((t%period)+period)%period>=burstLen) return 0;
  const k=Math.round(t/T - 0.5);
  const c=(k+0.5)*T;
  const p=valleyPulse(t,c,w);
  if(p<=0) return 0;
  return -ampKPa*Math.min(1,p);
}

/* =====================
   Estado
   ===================== */
const state={mode:'sn',unit:'kPa',pMaxKPa:2.2,freq:60,burst:12,rest:3,sdr:'2',playing:true,ageBand:2};
let worldT=0, t0=performance.now()/1000;
const Fs=100, dt=1/Fs, bufferSec=20, N=Math.floor(bufferSec*Fs);

/* =====================
   Buffer circular
   ===================== */
const buf=new Float32Array(N); let wIx=0, filled=0;
function pushSample(v){ buf[wIx]=v; wIx=(wIx+1)%N; filled=Math.min(filled+1,N); }
function getAt(i){ const ix=(wIx - filled + i + N)%N; return buf[ix]; }

/* =====================
   Canvas + capas est√°ticas
   ===================== */
const cvTop=document.getElementById('cvTop'), gTop=cvTop.getContext('2d');
const cvBottom=document.getElementById('cvBottom'), gBot=cvBottom.getContext('2d');
let gridTop, gridBot, xPixTop=null, xPixBot=null;

function yScale(unit){ const minKPa=-4,maxKPa=0; return {min:kPaToDisplay(minKPa,unit),max:kPaToDisplay(maxKPa,unit)} }
function mapXPrecalc(len,ctxW){ const left=50,right=ctxW-12; const out=new Float32Array(len); for(let i=0;i<len;i++){ const fr=i/(len-1); out[i]=left+fr*(right-left); } return out; }
function mapYTop(v,u){ const {min,max}=yScale(u); const top=14,bottom=cvTop.height-26; const frac=(v-min)/(max-min); return bottom-frac*(bottom-top) }

function buildTopGrid(unit){
  gridTop=document.createElement('canvas');
  gridTop.width=cvTop.width; gridTop.height=cvTop.height;
  const g=gridTop.getContext('2d');
  g.fillStyle='#071022'; g.fillRect(0,0,cvTop.width,cvTop.height);
  g.strokeStyle='#1f2a44';
  const {min,max}=yScale(unit); const steps=6;
  for(let k=0;k<=steps;k++){
    const v=min+(k/steps)*(max-min); const y=mapYTop(v,unit);
    g.beginPath(); g.moveTo(50,y); g.lineTo(cvTop.width-12,y); g.stroke();
    g.fillStyle='#9fb0c7'; g.font='12px sans-serif'; g.textAlign='right';
    g.fillText(v.toFixed(unit==='Pa'?0:1),44,y+3);
  }
  for(let s=0;s<=20;s++){
    const x=50 + (cvTop.width-62)*(s/20);
    g.strokeStyle='#0b1220'; g.beginPath(); g.moveTo(x,14); g.lineTo(x,cvTop.height-26); g.stroke();
    g.fillStyle='#9fb0c7'; g.textAlign='center'; g.fillText(s+'s', x, cvTop.height-6);
  }
  g.fillStyle='#cbd5e1'; g.textAlign='center'; g.font='13px sans-serif';
  g.fillText('Tiempo (0‚Äì20 s, desplazamiento ‚Üí)', cvTop.width/2, cvTop.height-2);
  g.save(); g.translate(16, cvTop.height/2); g.rotate(-Math.PI/2); g.fillText('Vac√≠o ('+unit+')',0,0); g.restore();
}
function buildBottomGrid(){
  gridBot=document.createElement('canvas');
  gridBot.width=cvBottom.width; gridBot.height=cvBottom.height;
  const g=gridBot.getContext('2d');
  g.fillStyle='#071022'; g.fillRect(0,0,cvBottom.width,cvBottom.height);
  g.strokeStyle='#1f2a44';
  for(let s=0;s<=20;s++){
    const x=50 + (cvBottom.width-62)*(s/20);
    g.beginPath(); g.moveTo(x,12); g.lineTo(x,cvBottom.height-14); g.stroke();
  }
  g.fillStyle='#cbd5e1'; g.textAlign='left'; g.font='12px sans-serif';
  g.fillText('Respiraci√≥n + Degluci√≥n (sincronizadas)', 14, 18);
}
function rebuildStatic(){ xPixTop=mapXPrecalc(N,cvTop.width); xPixBot=mapXPrecalc(N,cvBottom.width); buildTopGrid(state.unit); buildBottomGrid(); }

/* =====================
   Dibujo din√°mico
   ===================== */
function drawSuctionLine(){
  gTop.clearRect(0,0,cvTop.width,cvTop.height); gTop.drawImage(gridTop,0,0);
  gTop.save(); gTop.strokeStyle='#38bdf8'; gTop.lineWidth=2; gTop.beginPath();
  const unit=state.unit; for(let i=0;i<filled;i++){ const x=xPixTop[i]; const y=mapYTop(kPaToDisplay(getAt(i),unit),unit); if(i===0) gTop.moveTo(x,y); else gTop.lineTo(x,y); }
  gTop.stroke(); gTop.restore();
}
function drawRespLine(resp){
  const yMid=cvBottom.height/2;
  gBot.clearRect(0,0,cvBottom.width,cvBottom.height); gBot.drawImage(gridBot,0,0);
  gBot.save(); gBot.strokeStyle='#10b981'; gBot.lineWidth=1.8; gBot.beginPath();
  const L=resp.length; for(let i=0;i<L;i++){ const x=xPixBot[i]; const y=yMid - resp[i]*60; if(i===0) gBot.moveTo(x,y); else gBot.lineTo(x,y); }
  gBot.stroke(); gBot.restore();
}
function drawPauseLines(fracs){
  if(!fracs||!fracs.length) return;
  // top
  gTop.save(); gTop.strokeStyle='rgba(250,204,21,0.95)'; gTop.lineWidth=2;
  fracs.forEach(fr=>{ const x=50 + (cvTop.width-62)*fr; gTop.beginPath(); gTop.moveTo(x,14); gTop.lineTo(x,cvTop.height-26); gTop.stroke();});
  gTop.restore();
  // bottom
  gBot.save(); gBot.strokeStyle='rgba(250,204,21,0.95)'; gBot.lineWidth=2;
  fracs.forEach(fr=>{ const x=50 + (cvBottom.width-62)*fr; gBot.beginPath(); gBot.moveTo(x,12); gBot.lineTo(x,cvBottom.height-12); gBot.stroke();});
  gBot.restore();
}
function drawSwallow(fracs){
  if(!fracs||!fracs.length) return;
  // top
  gTop.save(); gTop.strokeStyle='#a855f7'; gTop.setLineDash([6,5]); gTop.lineWidth=2;
  fracs.forEach(fr=>{ const x=50 + (cvTop.width-62)*fr; gTop.beginPath(); gTop.moveTo(x,14); gTop.lineTo(x,cvTop.height-26); gTop.stroke();});
  gTop.setLineDash([]); gTop.restore();
  // bottom
  gBot.save(); gBot.strokeStyle='#a855f7'; gBot.setLineDash([6,5]); gBot.lineWidth=2;
  fracs.forEach(fr=>{ const x=50 + (cvBottom.width-62)*fr; gBot.beginPath(); gBot.moveTo(x,12); gBot.lineTo(x,cvBottom.height-12); gBot.stroke();});
  gBot.setLineDash([]); gBot.restore();
}
function drawApnea(fracs){
  if(!fracs||!fracs.length) return; const ap=Math.floor(0.25*Fs);
  // top
  gTop.save(); fracs.forEach(fr=>{ const x=50 + (cvTop.width-62)*fr; const bandW=2*ap*(cvTop.width/(N-1)); gTop.fillStyle='rgba(148,163,184,0.18)'; gTop.fillRect(x-bandW/2, 14, bandW, cvTop.height-40); gTop.fillStyle='#cbd5e1'; gTop.font='14px sans-serif'; gTop.textAlign='center'; gTop.fillText('‚äò', x, 24); }); gTop.restore();
  // bottom
  gBot.save(); fracs.forEach(fr=>{ const x=50 + (cvBottom.width-62)*fr; const bandW=2*ap*(cvBottom.width/(N-1)); gBot.fillStyle='rgba(148,163,184,0.28)'; gBot.fillRect(x-bandW/2, 12, bandW, cvBottom.height-24); gBot.fillStyle='#cbd5e1'; gBot.font='14px sans-serif'; gBot.textAlign='center'; gBot.fillText('‚äò', x, 24); }); gBot.restore();
}

/* =====================
   An√°lisis + NOMAS
   ===================== */
function findMinima(vec,minDistSec,thr){
  const L=vec.length, minDist=Math.max(1,Math.floor(minDistSec*Fs)); const idx=[]; let i=1;
  while(i<L-1){
    if(vec[i]<thr && vec[i]<=vec[i-1] && vec[i]<=vec[i+1]){
      const start=Math.max(1,i-Math.floor(minDist/2)), end=Math.min(L-2,i+Math.floor(minDist/2)); let minI=i;
      for(let j=start;j<=end;j++) if(vec[j]<vec[minI]) minI=j; idx.push(minI); i=minI+minDist;
    } else i++;
  }
  return idx;
}
function analyzeWindow(vec){
  const L=vec.length; if(L<10) return null; let minVal=0;
  for (let i=0;i<L;i++) if (vec[i]<minVal) minVal=i===0?vec[i]:Math.min(minVal,vec[i]);
  const thr=Math.min(-0.2, 0.35*minVal);
  const Texp=60/Math.max(30,Math.min(180,state.freq));
  const sucksIdx=findMinima(vec,Math.max(0.12,0.5*Texp),thr);
  const times=sucksIdx.map(i=>i/Fs);
  let freqHz=0;
  if(times.length>=2){ let sum=0; for(let j=1;j<times.length;j++) sum+=times[j]-times[j-1]; const meanISI=sum/(times.length-1); freqHz=1/meanISI; }
  const pauseTh=1.2; const bursts=[], pauseFr=[], pauses=[];
  if(times.length){ let start=0; for(let j=1;j<times.length;j++){ const gap=times[j]-times[j-1]; if(gap>pauseTh){ bursts.push([sucksIdx[start],sucksIdx[j-1]]); pauses.push(gap); pauseFr.push(sucksIdx[j-1]/(L-1)); start=j; } } bursts.push([sucksIdx[start],sucksIdx[sucksIdx.length-1]]); }
  const perBurst=bursts.map(([s,e])=>({s,e,sucks:sucksIdx.filter(i=>i>=s&&i<=e).length,dur:(e-s)/Fs}));
  const med=a=>a.length?a.sort((x,y)=>x-y)[Math.floor(a.length/2)]:0;
  const medianS=med(perBurst.map(b=>b.sucks));
  const medianD=med(perBurst.map(b=>b.dur));
  const Ts=perBurst.reduce((acc,b)=>acc+b.dur,0);
  const Tp=pauses.reduce((a,b)=>a+b,0);
  const IC=(Ts+Tp)>0? Ts/(Ts+Tp):0;
  const pauseMask=new Uint8Array(L); for(let i=0;i<L;i++){ if(Math.abs(vec[i])<0.02) pauseMask[i]=1; }
  return {vacMaxKPa:Math.min(...vec),freqHz,medianSucks:medianS,medianDur:medianD,pauseMean:pauses.length?(pauses.reduce((a,b)=>a+b,0)/pauses.length):0,IC,pausePositions:pauseFr,sucksIdx,pauseMask};
}

/* =====================
   SDR
   ===================== */
let rndSeed=1234567; function rand(){ rndSeed=(1103515245*rndSeed+12345)>>>0; return (rndSeed&0x7fffffff)/0x80000000; }
function buildSwallowFracs(analysis){
  const idxs=analysis.sucksIdx||[]; const L=idxs.length?analysis.pauseMask.length:N; const out=[];
  if(state.sdr==='none') return out;
  if(state.mode==='sn'){
    const n=parseInt(state.sdr,10); if(!isFinite(n)) return out;
    idxs.forEach((ix,k)=>{ if((k+1)%n===0) out.push(ix/(L-1)); });
    return out;
  } else {
    const pMap={pLow:0.05,pMed:0.12,pHigh:0.2}; const p=pMap[state.sdr]||0.1;
    idxs.forEach(ix=>{ if(rand()<p) out.push(ix/(L-1)); });
    return out;
  }
}

/* =====================
   Respiraci√≥n coherente (s√≥lo pausas reales) + apnea en D
   ===================== */
function buildRespSmart(analysis){
  const L = (analysis && (analysis.L || (analysis.pauseMask ? analysis.pauseMask.length : undefined))) || N;
  const resp = new Float32Array(L);
  const mask = new Uint8Array(L);
  let ranges = (analysis && analysis.pauseRanges) || [];
  if ((!ranges || !ranges.length) && analysis && analysis.sucksIdx) {
    const idxs = analysis.sucksIdx;
    const thrIx = Math.floor(1.2 * Fs);
    for (let j = 1; j < idxs.length; j++) {
      if (idxs[j] - idxs[j - 1] > thrIx) ranges.push([idxs[j - 1], idxs[j]]);
    }
  }
  ranges.forEach(([a, b]) => {
    const i0 = Math.max(0, a), i1 = Math.min(L - 1, b);
    for (let i = i0; i <= i1; i++) mask[i] = 1;
  });
  const fBase = (state.mode === 'sn') ? 40 / 60 : 50 / 60;
  const dPhi = 2 * Math.PI * fBase / Fs; let phase = 0;
  for (let i = 0; i < L; i++) { resp[i] = mask[i] ? 0.8 * Math.sin(phase) : 0; if (mask[i]) phase += dPhi; }
  const swFracs = buildSwallowFracs(analysis || {sucksIdx:[]}); const ap = Math.floor(0.25 * Fs);
  swFracs.forEach(fr => { const ix = Math.floor(fr * (L - 1)); for (let j = Math.max(0, ix - ap); j < Math.min(L, ix + ap); j++) resp[j] = 0; });
  return { resp, swFracs };
}

/* =====================
   KPIs / NOMAS
   ===================== */
const kP=document.getElementById('kP'),kF=document.getElementById('kF'),kSR=document.getElementById('kSR'),kBD=document.getElementById('kBD'),kPause=document.getElementById('kPause'),kIC=document.getElementById('kIC');
function updateMetrics(a){ const unit=state.unit; const pAbs=kPaToDisplay(Math.abs(a.vacMaxKPa),unit); kP.textContent=(unit==='Pa'?pAbs.toFixed(0):pAbs.toFixed(unit==='mmHg'?1:2))+' '+unit; kF.textContent=((a.freqHz*60)||0).toFixed(0)+' /min'; kSR.textContent=isFinite(a.medianSucks)?a.medianSucks:'‚Äî'; kBD.textContent=isFinite(a.medianDur)?a.medianDur.toFixed(2)+' s':'‚Äî'; kPause.textContent=(a.pauseMean||0).toFixed(2)+' s'; kIC.textContent=(a.IC||0).toFixed(2); }
const AGE_BANDS=[{minVac:0.7,freqSN:[30,50],freqSNN:[80,120],IC:[0.4,0.6]},{minVac:1.1,freqSN:[40,70],freqSNN:[90,130],IC:[0.5,0.7]},{minVac:1.6,freqSN:[40,90],freqSNN:[90,150],IC:[0.65,0.85]},];
function rangesForAge(){ return AGE_BANDS[state.ageBand] || AGE_BANDS[2]; }
function updateNOMAS(a){ const R=rangesForAge(); const freq=a.freqHz*60; const inFreq = state.mode==='sn' ? (freq>=R.freqSN[0] && freq<=R.freqSN[1]) : (freq>=R.freqSNN[0] && freq<=R.freqSNN[1]); document.getElementById('n_continuidad_baja').checked = a.IC < R.IC[0]; document.getElementById('n_racimos_cortos').checked = (a.medianDur>0 && a.medianDur<2.0); document.getElementById('n_pausas_largas').checked = a.pauseMean>2.0; document.getElementById('n_vacio_bajo').checked = Math.abs(a.vacMaxKPa) < R.minVac; document.getElementById('n_frec_extrema').checked = !inFreq; document.getElementById('n_incoordinacion').checked = (state.sdr!=='none' && a.pauseMean===0 && freq>120); document.getElementById('n_resp_irregular').checked = a.pauseMean===0 && freq>120; }
function updateEduBox(a){ const R=rangesForAge(); const freq=a.freqHz*60; const issues=[]; if(Math.abs(a.vacMaxKPa)<R.minVac) issues.push('Vac√≠o bajo para esta edad.'); const [lo,hi]= state.mode==='sn'?R.freqSN:R.freqSNN; if(freq<lo||freq>hi) issues.push(`Frecuencia fuera de rango esperado (${lo}‚Äì${hi}/min).`); if(a.IC<R.IC[0]) issues.push(`Continuidad baja (IC < ${R.IC[0].toFixed(2)}).`); let cls='good', label='Normal/Maduro'; const p=issues.length; if(p===1||p===2){cls='warn';label='Desorganizado';} if(p>=3){cls='bad';label='Disfuncional';} const box=document.getElementById('eduBox'); box.innerHTML=`<span class="badge ${cls}" style="margin-right:8px">NOMAS (educativo): ${label}</span>` + (issues.length?`<ul>${issues.map(x=>`<li>${x}</li>`).join('')}</ul>`:'<div class="help">Par√°metros dentro de bandas esperadas por edad.</div>'); }

/* =====================
   Bucle principal
   ===================== */
let lastAnalysis=null, lastAts=0; const ANALYSIS_HZ=10;
function step(){
  if(!state.playing){ requestAnimationFrame(step); return; }
  const now=performance.now()/1000; let dtSim=now-t0; t0=now;
  const steps=Math.min( (dtSim>0?Math.floor(dtSim*Fs):0), 5*Fs );
  for(let n=0;n<steps;n++){ worldT+=dt; const s = suctionSample(worldT, state.freq/60, state.burst, state.rest, state.pMaxKPa); pushSample(s); }

  // dibujo succi√≥n
  drawSuctionLine();

  // an√°lisis con throttling
  if(now - lastAts >= (1/ANALYSIS_HZ)){
    const L=filled; if(L>20){ const snap=new Float32Array(L); for(let i=0;i<L;i++) snap[i]=getAt(i); lastAnalysis=analyzeWindow(snap); if(lastAnalysis){ updateMetrics(lastAnalysis); updateNOMAS(lastAnalysis); updateEduBox(lastAnalysis); } }
    lastAts=now;
  }

  // overlays (resp + D + apnea + l√≠mites de pausa)
  if(lastAnalysis){
    const ov=buildRespSmart(lastAnalysis);
    drawRespLine(ov.resp); drawApnea(ov.swFracs); drawSwallow(ov.swFracs);
    if(lastAnalysis.pausePositions.length) drawPauseLines(lastAnalysis.pausePositions);
  }

  requestAnimationFrame(step);
}

/* =====================
   UI
   ===================== */
const modeSel=document.getElementById('mode'), ageSel=document.getElementById('ageBand');
const pmax=document.getElementById('pmax'),pmaxL=document.getElementById('pmaxL'),pmaxConv=document.getElementById('pmaxConv');
const freq=document.getElementById('freq'),freqL=document.getElementById('freqL');
const burst=document.getElementById('burst'),burstL=document.getElementById('burstL');
const rest=document.getElementById('rest'),restL=document.getElementById('restL');
const sdrSel=document.getElementById('sdr');
const playBtn=document.getElementById('playBtn'), pauseBtn=document.getElementById('pauseBtn');
const presetSN=document.getElementById('presetSN'), presetSNN=document.getElementById('presetSNN'), presetDys=document.getElementById('presetDys');
const unitSel=document.getElementById('unitSel');

function updatePmaxConv(){ const kPa=state.pMaxKPa; pmaxConv.textContent=`(‚âà ${(kPa*7.50062).toFixed(1)} mmHg / ${(kPa*1000).toFixed(0)} Pa)`; }
function applyModeDefaults(){ if(state.mode==='sn'){ state.freq=60; state.pMaxKPa=2.2; state.burst=12; state.rest=3; } else { state.freq=110; state.pMaxKPa=1.0; state.burst=8; state.rest=3; } freq.value=state.freq; pmax.value=state.pMaxKPa; burst.value=state.burst; rest.value=state.rest; freqL.textContent=state.freq; pmaxL.textContent=state.pMaxKPa; burstL.textContent=state.burst; restL.textContent=state.rest; updatePmaxConv(); }
modeSel.addEventListener('change',()=>{ state.mode=modeSel.value; applyModeDefaults(); rndSeed=1234567; });
ageSel.addEventListener('change',()=>{ state.ageBand=parseInt(ageSel.value,10)||2; });
pmax.addEventListener('input',()=>{ state.pMaxKPa=+pmax.value; pmaxL.textContent=pmax.value; updatePmaxConv(); });
freq.addEventListener('input',()=>{ state.freq=+freq.value; freqL.textContent=freq.value; });
burst.addEventListener('input',()=>{ state.burst=+burst.value; burstL.textContent=burst.value; });
rest.addEventListener('input',()=>{ state.rest=+rest.value; restL.textContent=rest.value; });
sdrSel.addEventListener('change',()=>{ state.sdr=sdrSel.value; });
playBtn.addEventListener('click',()=>{ state.playing=true; playBtn.classList.add('primary'); pauseBtn.classList.remove('primary'); });
pauseBtn.addEventListener('click',()=>{ state.playing=false; pauseBtn.classList.add('primary'); playBtn.classList.remove('primary'); });
presetSN.addEventListener('click',()=>{ state.mode='sn'; modeSel.value='sn'; applyModeDefaults(); sdrSel.value='2'; state.sdr='2'; });
presetSNN.addEventListener('click',()=>{ state.mode='snn'; modeSel.value='snn'; applyModeDefaults(); sdrSel.value='pMed'; state.sdr='pMed'; });
presetDys.addEventListener('click',()=>{ state.mode='sn'; modeSel.value='sn'; state.freq=35; state.pMaxKPa=0.9; state.burst=5; state.rest=6; freq.value=35; pmax.value=0.9; burst.value=5; rest.value=6; freqL.textContent=35; pmaxL.textContent=0.9; burstL.textContent=5; restL.textContent=6; updatePmaxConv(); sdrSel.value='none'; state.sdr='none'; });
unitSel.addEventListener('change',()=>{ state.unit=unitSel.value; rebuildStatic(); });

/* =====================
   Init
   ===================== */
function onResize(){
  rebuildStatic(); drawSuctionLine();
  if(lastAnalysis){ const ov=buildRespSmart(lastAnalysis); drawRespLine(ov.resp); drawApnea(ov.swFracs); drawSwallow(ov.swFracs); if(lastAnalysis.pausePositions.length) drawPauseLines(lastAnalysis.pausePositions); }
}
applyModeDefaults(); rebuildStatic();
window.addEventListener('resize',()=>{ clearTimeout(window.__rsz); window.__rsz=setTimeout(onResize,100); });
requestAnimationFrame(step);

/* === Evidencia: datos + UI (no interfiere con la simulaci√≥n) === */
(function(){
  const EV_DATA=[
    {param:'Vac√≠o m√°x. (Pmax)', bullets:[
      'Picos al pecho ‚àº100‚Äì150 mmHg (13‚Äì20 kPa).',
      'Tetina activada por vac√≠o: umbral ‚àº29 mmHg; patr√≥n comparable al pecho.'
    ], refs:[
      {t:'Geddes DT et al., Early Human Dev. 2008', u:'https://pubmed.ncbi.nlm.nih.gov/18262736/'},
      {t:'Sakalidis VS et al., Int J Pediatr. 2012 (PMC)', u:'https://pmc.ncbi.nlm.nih.gov/articles/PMC3398629/'}
    ]},
    {param:'Frecuencia (SN/SNN)', bullets:[
      'SNN ‚âà 2 Hz (‚àº120 succ/min).',
      'SN t√≠pico menor: ‚àº50‚Äì80 succ/min (seg√∫n m√©todo y contexto).'
    ], refs:[
      {t:'Martens A et al., 2020 (PMC)', u:'https://pmc.ncbi.nlm.nih.gov/articles/PMC8943411/'},
      {t:'Cunha M et al., JPnim 2019', u:'https://www.jpnim.com/index.php/jpnim/article/view/090227'}
    ]},
    {param:'Racimos y pausas', bullets:[
      'SN: racimos medianos ‚àº10‚Äì20 s; en pret√©rmino, las pausas suelen ser ‚â• a los racimos.',
      'Segmentaci√≥n t√≠pica: pausas ‚â• 2 s.'
    ], refs:[
      {t:'Geddes DT et al., BMC 2017 (PMC)', u:'https://pmc.ncbi.nlm.nih.gov/articles/PMC5693509/'},
      {t:'Lagarde MLJ et al., BMC Pediatr. 2019', u:'https://bmcpediatr.biomedcentral.com/articles/10.1186/s12887-019-1445-3'}
    ]},
    {param:'Coordinaci√≥n S‚ÄìD‚ÄìR', bullets:[
      'Con tetinas activadas por vac√≠o, SSwB comparable al pecho.',
      'Relaciones S:D observadas 1:1 a 4:1 seg√∫n flujo/maduraci√≥n.'
    ], refs:[
      {t:'Sakalidis VS et al., 2012 (PMC)', u:'https://pmc.ncbi.nlm.nih.gov/articles/PMC3398629/'},
      {t:'Lagarde MLJ et al., BMC Pediatr. 2019', u:'https://bmcpediatr.biomedcentral.com/articles/10.1186/s12887-019-1445-3'}
    ]},
    {param:'Medici√≥n de NNS', bullets:[
      'Pacificador + transductor de presi√≥n para cuantificar NNS (protocolo JoVE).'
    ], refs:[
      {t:'JoVE Protocols 2024', u:'https://www.jove.com/t/66273/non-nutritive-suck-parameters-measurements-using-custom-pressure'}
    ]}
  ];
  function renderEv(){
    const box=document.getElementById('evContent');
    if(!box) return;
    box.innerHTML = EV_DATA.map(sec=>`<div style="margin-bottom:14px"><div style="font-weight:700;color:#e5eef8">${sec.param}</div><ul style="margin:6px 0 8px 18px">${sec.bullets.map(b=>`<li>${b}</li>`).join('')}</ul><div>${sec.refs.map(r=>`<a href="${r.u}" target="_blank" rel="noopener" style="color:#38bdf8;text-decoration:none">${r.t}</a>`).join('<br>')}</div></div>`).join('');
  }
  const btn=document.getElementById('evBtn'); const drawer=document.getElementById('evDrawer'); const close=document.getElementById('evClose');
  if(btn&&drawer&&close){
    btn.addEventListener('click',()=>{ renderEv(); drawer.style.display='block'; });
    close.addEventListener('click',()=>{ drawer.style.display='none'; });
    drawer.addEventListener('click',e=>{ if(e.target===drawer) drawer.style.display='none'; });
  }
})();
</script>
</body>
</html>
