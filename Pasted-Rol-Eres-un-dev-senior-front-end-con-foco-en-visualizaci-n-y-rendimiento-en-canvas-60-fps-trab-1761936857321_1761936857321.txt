Rol: Eres un dev senior front-end con foco en visualizaci√≥n y rendimiento en <canvas> (60 fps), trabajando sobre un simulador did√°ctico de succi√≥n neonatal SN/SNN.

Contexto del producto (transferencia de investigaci√≥n):

App web est√°tica (HTML √∫nico) con dos paneles sincronizados:

Panel superior: succi√≥n (vac√≠o intraoral) va de 0 a negativo (kPa/mmHg).

Panel inferior: degluci√≥n (l√≠neas punteadas), apnea (banda gris con s√≠mbolo ‚äò ¬±0.25 s alrededor de cada D) y respiraci√≥n solo en las pausas de succi√≥n (inspiraci√≥n positiva, mL/s).

Controles (no romper su API ni nombres): Pmax, Frecuencia, Duraci√≥n de racimo, Pausa, selector SDR (1:1:1, 2:1:1, 3:1:1 en SN; y probabil√≠stico baja/media/alta en SNN), Play/Pause, y presets (SN, SNN, Desorganizado).

NOMAS educativo: checkboxes relevantes y bandas por edad (32‚Äì34, 34‚Äì36, ‚â•37 sem) con m√©tricas (frecuencia medida, succ/racimo, pausa media, IC).

Convenciones visuales: colores/s√≠mbolos solo en el panel inferior; el panel superior se mantiene limpio.

Evidencia: bot√≥n ‚Äúüìé Evidencia‚Äù que abre un drawer con referencias (PubMed/PMC/JoVE) y tooltips ‚Äú‚ìò‚Äù en sliders (no deben interferir con la animaci√≥n).

Ventana de tiempo fija: 20 s en ambos paneles.

Forma de onda: succi√≥n valle senoidal suavizada (no diente de sierra).

Unidades: succi√≥n en kPa/mmHg (negativo) y respiraci√≥n en mL/s (positivo).

Rendimiento objetivo: animaci√≥n fluida (‚âà60 fps), sliders responsivos, sin bloqueos en m√©tricas.

C√≥digo base (p√©galo tal cual, SIN editar antes):

<<<PEGA_AQUI_TU_HTML_COMPLETO>>>

Objetivos (no romper nada)

Mantener el comportamiento y la UX actual 100%.

Optimizar rendimiento (60 fps), especialmente el render <canvas> y el c√°lculo de m√©tricas.

Modularizar internamente (sin cambiar la API de controles) para facilitar futuras features.

Preparar publicaci√≥n: estructura de archivos, README t√©cnico, LICENCIA, y replit config m√≠nima para hosting est√°tico.

Criterios de √©xito

La animaci√≥n corre ~60 fps en equipos modestos.

Sliders responden al instante (sin ‚Äújank‚Äù).

M√©tricas (frecuencia/min, succ/racimo, pausa media, IC) estables y coherentes.

Apneas (‚äò) sincronizadas con D; respiraci√≥n aparece solo en pausas y se suprime alrededor de D.

SN (determinista) y SNN (probabil√≠stico) siguen funcionando.

Drawer de Evidencia y tooltips no bloquean el hilo de animaci√≥n.

Restricciones

No cambiar IDs de elementos ni nombres de funciones p√∫blicas usadas por la UI (para no romper la API de controles).

Mantener estilos y convenciones visuales actuales.

Todo en JS/HTML/CSS nativo; cero dependencias externas salvo que justifiques ganancia clara.

Cualquier refactor debe ser backward-compatible con el HTML actual.

Plan de trabajo (pide PRs/commits incrementales)
Paso 1 ‚Äî Auditor√≠a r√°pida + perfiles de rendimiento

Instrumentar performance.now(), console.time() y contadores de FPS.

Detectar cuellos de botella:

Dibujo completo en cada frame vs. dibujo incremental.

Recomputos repetidos (ejes, grillas) vs. capas est√°ticas.

C√°lculo de m√©tricas en caliente vs. throttling (10 Hz ya est√°: confirmar).

Entregable: un informe corto en docs/perf-notes.md con n√∫meros y prioridad de mejoras.

Paso 2 ‚Äî Micro-optimizaciones seguras (sin romper UX)

Offscreen buffers: renderizar grillas y ejes en canvases cacheados (ya se hace; verifica que nunca se rehagan por frame, solo en resize o cambio de unidad).

Pre-memoizaci√≥n:

xPixTop/xPixBot precalculados para N puntos (ya est√°).

mapYTop con LUT simple si el rango no cambia (kPa ‚Üî mmHg).

Dibujo incremental: limpiar solo la franja que avanza (si factible con el buffer circular), o mantener el scroll v√≠a √≠ndice sin redibujar toda la polil√≠nea.

GC-friendly: evitar crear arrays intermedios por frame; reusar Float32Array para snapshots.

Throttling del an√°lisis: confirmar 10 Hz y que el snapshot sea por referencia y copiado una vez.

Paso 3 ‚Äî Salud del bucle de animaci√≥n

Asegurar que requestAnimationFrame(step) nunca quede bloqueado por operaciones s√≠ncronas largas (e.g., al abrir el drawer, tooltips).

Comprobar que los listeners solo actualicen estado y no disparen c√°lculos pesados.

Paso 4 ‚Äî Mantenimiento de evidencia / tooltips

Validar que el drawer de Evidencia y los tooltips ‚Äú‚ìò‚Äù no ejecuten nada en cada frame.

Lazy-render del contenido del drawer (ya est√°). Mantener as√≠.

Paso 5 ‚Äî Estructura de proyecto para publicaci√≥n

Proponer split en carpetas sin cambiar rutas existentes (o crear alias):

/index.html
/assets/logo_Ibero.png   (fallback SVG inline ya incluido)
/assets/icon-ibero.svg
/docs/README.md          (uso did√°ctico + par√°metros)
/docs/perf-notes.md      (mediciones 60 fps, t√©cnicas)
/LICENSE                 (sug.: CC BY-NC-SA 4.0 o MIT seg√∫n pol√≠tica)
/CITATION.cff            (cita acad√©mica)
/replit.yaml             (servidor est√°tico)


Crear README.md con: objetivo, controles, SDR (SN vs SNN), NOMAS, unidades, citaci√≥n de evidencia.

Paso 6 ‚Äî Configuraci√≥n Replit (hosting est√°tico)

A√±adir replit.yaml m√≠nimo:

run: ["sh", "-c", "python3 -m http.server 8000"]


y configurar el ‚ÄúWebview‚Äù a http://localhost:8000.

(Opcional) .replit con "run" equivalente.

Paso 7 ‚Äî Tests manuales (no regresi√≥n)

Play/Pause: sin p√©rdida de frames ni drift del tiempo.

Cambio de unidades: redibuja grilla superior sin recalcular todo.

Resize: recalcula grillas y mapeos una sola vez con debounce.

Presets: SN (60/2.2/12/3), SNN (110/1.0/8/3), Desorganizado (35/0.9/5/6) mantienen comportamiento esperable.

SDR: SN determinista (1:1:1 / 2:1:1 / 3:1:1) y SNN probabil√≠stico (baja/ media/ alta) siguen sincronizando D y apnea (‚äò ¬±0.25 s).

Tareas solicitadas a Replit (entregables concretos)

Perf patch 1:

Confirmar que ejes/grillas se renderizan solo en rebuildStatic().

Revisar si drawSuctionLine() puede usar l√≠nea parcial con moveTo desde el √∫ltimo √≠ndice y borrar solo la regi√≥n previa (si la complejidad no compensa, dejar full draw pero justificar).

Perf patch 2:

Evitar al m√°ximo new Float32Array(L) en cada an√°lisis: reutiliza un buffer global snap y c√≥pialo con set cuando toque.

Docs para publicaci√≥n:

Crear docs/README.md con secciones: Contexto did√°ctico, Controles y rangos, NOMAS y bandas por edad, Convenciones visuales, Citas cient√≠ficas (copiar las del drawer).

Crear CITATION.cff con t√≠tulo (Suction Simulator SN/SNN), autores y enlace al repo (placeholder).

Proponer licencia (MIT si buscas m√°xima adopci√≥n; o CC BY-NC-SA si quieres restringir uso comercial).

replit.yaml + vercel-ready (opcional):

Dejar replit.yaml listo.

A√±adir instrucciones en docs/README.md para desplegar tambi√©n en GitHub Pages o Vercel (est√°tico).

Checklist de verificaci√≥n (a√±adir a docs/perf-notes.md):

FPS ~60 (medido con devtools).

Latencia de sliders < 16 ms por interacci√≥n.

An√°lisis 10 Hz estable (sin GC spikes > 30 ms).

Sin fugas de listeners ni timers.

Importante (no hacer)

No cambiar IDs, clases o nombres de funciones llamados por la UI.

No alterar los colores/s√≠mbolos del panel inferior.

No cambiar los presets ni su sem√°ntica.

No introducir librer√≠as pesadas.

Al final, entrega:

El mismo index.html funcional (o ruta ra√≠z) con mejoras internas.

/docs/README.md, /docs/perf-notes.md, /CITATION.cff, /LICENSE, /replit.yaml.

Notas de qu√© optimizaciones se aplicaron y por qu√©.